using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
using System;
using System.Collections.Generic;
using System.Text;

namespace TestGenerator
{
	public class TemplateGenerator
	{
		public TestClassInfo GetTemplate(string sourceCode)
		{
			List<TestClassInfo> templates = GetTestTemplates(sourceCode);
			if (templates.Count != 0)
			{
				string fileName = templates[0].FileName;
				string content = "";
				foreach (TestClassInfo template in templates)
				{
					content += template.Content;
				}
				return new TestClassInfo(fileName, content);
			} else
			{
				return null;
			}
		}

		private List<TestClassInfo> GetTestTemplates(string sourceCode)
		{
			CodeAnalyzer analyzer = new CodeAnalyzer();
			List<ClassInfo> classes = analyzer.Parse(sourceCode);
			List<TestClassInfo> testClasses = new List<TestClassInfo>();
			foreach (ClassInfo classInfo in classes)
			{
				Console.WriteLine(classInfo.Name + " " + classInfo.Namespace);
				NamespaceDeclarationSyntax namespaceDeclaration = NamespaceDeclaration(
					QualifiedName(
						IdentifierName(classInfo.Namespace),
						IdentifierName("Tests")));
				CompilationUnitSyntax testClass = CompilationUnit()
					.WithUsings(GetUsings(classInfo))
					.WithMembers(SingletonList<MemberDeclarationSyntax>(namespaceDeclaration
						.WithMembers(SingletonList<MemberDeclarationSyntax>(ClassDeclaration(classInfo.Name + "Tests")
							.WithAttributeLists(
								SingletonList(
									AttributeList(
										SingletonSeparatedList(
											Attribute(
												IdentifierName("TestClass"))))))
							.WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
							.WithMembers(GetTestMethods(classInfo.MethodList))))));
				string fileName = classInfo.Name + "Tests.cs";
				string innerText = testClass.NormalizeWhitespace().ToFullString();
				testClasses.Add(new TestClassInfo(fileName, innerText));
			}
			return testClasses;
		}

		private SyntaxList<MemberDeclarationSyntax> GetTestMethods(List<string> methods)
		{
			List<MemberDeclarationSyntax> result = new List<MemberDeclarationSyntax>();
			foreach (string method in methods)
			{
				result.Add(GenerateTestMethod(method));
			}
			return new SyntaxList<MemberDeclarationSyntax>(result);
		}

		private MethodDeclarationSyntax GenerateTestMethod(string methodName)
		{
			string attributeForTemplate = "TestMethod";
			string methodBody = "Assert.Fail(\"autogenerated\");";
			return MethodDeclaration(
				PredefinedType(
					Token(SyntaxKind.VoidKeyword)),
				Identifier(methodName + "Test"))
				.WithAttributeLists(
					SingletonList(
						AttributeList(
							SingletonSeparatedList(
								Attribute(
									IdentifierName(attributeForTemplate))))))
				.WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
				.WithBody(Block(ParseStatement(methodBody)));
		}

		private SyntaxList<UsingDirectiveSyntax> GetUsings(ClassInfo classInfo)
		{
			List<UsingDirectiveSyntax> usings = new List<UsingDirectiveSyntax>
			{
				UsingDirective(
					IdentifierName("System")),
				UsingDirective(
					QualifiedName(
						QualifiedName(
							IdentifierName("System"),
							IdentifierName("Collections")),
						IdentifierName("Generic"))),
				UsingDirective(
					QualifiedName(
						IdentifierName("System"),
						IdentifierName("Linq"))),
				UsingDirective(
					QualifiedName(
						QualifiedName(
							QualifiedName(
								IdentifierName("Microsoft"),
								IdentifierName("VisualStudio")),
							IdentifierName("TestTools")),
						IdentifierName("UnitTesting"))),
				UsingDirective(
					IdentifierName(classInfo.Namespace))
			};
			return new SyntaxList<UsingDirectiveSyntax>(usings);
		}
	}
}
